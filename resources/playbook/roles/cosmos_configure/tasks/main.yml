---
- name: register public ip
  uri:
    url: 'https://api.ipify.org?format=json'
  register: public_ip

- name: Set up external address
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/config.toml'
    regexp: 'external_address = "'
    line: 'external_address = "{{ public_ip.json.ip }}:{{ custom_port_prefix }}56"'
    state: present

- name: Adjust config.toml port
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/config.toml'
    regexp: '{{ item.key }}'
    line: '{{ item.value }}'
  loop: '{{ config_port_changes | dict2items }}'

- name: Set minimum-gas-prices
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/app.toml'
    regexp: '^minimum-gas-prices = ".*"$'
    line: 'minimum-gas-prices = "{{ min_gas_price }}"'
  when: min_gas_price is defined

- name: Adjust app.toml ports
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/app.toml'
    regexp: '{{ item.key }}'
    line: '{{ item.value }}'
    backrefs: true
  loop: '{{ app_port_changes | dict2items }}'

- name: Set pruning settings
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/app.toml'
    regexp: '{{ item.key }}'
    line: '{{ item.value }}'
  loop: '{{ pruning_default | dict2items }}'
  when: type is not defined

- name: Adjust pruning setting for relayer
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/app.toml'
    regexp: '{{ item.key }}'
    line: '{{ item.value }}'
  loop: '{{ pruning_relayer | dict2items }}'
  when: type is defined and type == 'relayer'

- name: Dowload addrbook
  ansible.builtin.get_url:
    url: '{{ addrbook }}'
    dest: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/addrbook.json'
    mode: '0644'
    force: true
  when: addrbook is defined

- name: Update peers in config.toml file
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder }}/config/config.toml'
    regexp: '^persistent_peers ='
    line: 'persistent_peers = "{{ peers }}"'
    state: present
  when: peers is defined

- name: Update seeds in config.toml file
  lineinfile:
    path: '{{ ansible_env.HOME }}/{{ cosmos_folder}}/config/config.toml'
    regexp: '^seeds ='
    line: 'seeds = "{{ seeds }}"'
    state: present
  when: seeds is defined

- name: Check if after config script exists
  ansible.builtin.stat:
    path: '{{ role_path }}/templates/after_config_{{ netname }}.sh.j2'
  register: after_config_script
  delegate_to: localhost

- name: execute after config script 
  shell: "{{ lookup('template', 'after_config_{{ netname }}.sh.j2') }}"
  args:
    chdir: '{{ ansible_env.HOME }}/{{ cosmos_folder }}'
    executable: /bin/bash
  when: after_config_script.stat.exists
   
